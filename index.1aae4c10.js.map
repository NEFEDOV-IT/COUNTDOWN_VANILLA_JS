{"mappings":"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","sources":["view.js","node_modules/date-fns/esm/_lib/requiredArgs/index.js","node_modules/date-fns/esm/toDate/index.js","node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","node_modules/date-fns/esm/startOfDay/index.js","node_modules/date-fns/esm/differenceInCalendarDays/index.js","node_modules/date-fns/esm/differenceInDays/index.js","node_modules/date-fns/esm/constants/index.js","node_modules/date-fns/esm/differenceInMilliseconds/index.js","node_modules/date-fns/esm/_lib/roundingMethods/index.js","node_modules/date-fns/esm/differenceInCalendarYears/index.js","node_modules/date-fns/esm/compareAsc/index.js","node_modules/date-fns/esm/_lib/toInteger/index.js","node_modules/date-fns/esm/parseISO/index.js","main.js","node_modules/date-fns/esm/differenceInSeconds/index.js","node_modules/date-fns/esm/differenceInMinutes/index.js","node_modules/date-fns/esm/differenceInHours/index.js","node_modules/date-fns/esm/differenceInYears/index.js","node_modules/date-fns/esm/isFuture/index.js"],"sourcesContent":["export const UI_ELEMENTS = {\n    DATE_INPUT: document.querySelector('.date__input'),\n    DATE_ANSWER: document.querySelector('.date__answer'),\n    DATE_FORM: document.querySelector('.date__form'),\n    DATE_BUTTON: document.querySelector('button'),\n}\n","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function (value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n\n};\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import { millisecondsInHour, millisecondsInMinute } from \"../constants/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? 2 : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: NaN,\n    restDateString: ''\n  };\n  var year = captures[1] ? parseInt(captures[1]) : null;\n  var century = captures[2] ? parseInt(captures[2]) : null; // either year or century is null, not both\n\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return new Date(NaN);\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import { UI_ELEMENTS } from './view.js'\nimport {\n    parseISO,\n    isFuture,\n    differenceInHours,\n    differenceInDays,\n    differenceInYears,\n    differenceInMinutes,\n    differenceInSeconds\n} from 'date-fns'\n\nlet timer = null\nconst DATE_ERROR_TEXT = 'Enter a future date!'\nconst state = {\n    ERRORS: [DATE_ERROR_TEXT, 'UUUPS, this day is now!'],\n}\n\nUI_ELEMENTS.DATE_FORM.addEventListener('input', (e) => {\n    e.preventDefault()\n    timer = setTimeout(function tick() {\n        renderDate()\n        timer = setTimeout(tick, 1000)\n    })\n})\n\nUI_ELEMENTS.DATE_BUTTON.addEventListener('click', () => {\n    clearTimeout(timer)\n    UI_ELEMENTS.DATE_INPUT.classList.remove('error')\n    UI_ELEMENTS.DATE_ANSWER.textContent = ''\n    UI_ELEMENTS.DATE_FORM.reset()\n})\n\nfunction renderDate() {\n    const currentDate = parseISO(UI_ELEMENTS.DATE_INPUT.value)\n    let getSeconds = differenceInSeconds(currentDate, new Date())\n    let getMinutes = differenceInMinutes(currentDate, new Date())\n    let getHours = differenceInHours(currentDate, new Date())\n    let getDays = differenceInDays(currentDate, new Date())\n    let getYears = differenceInYears(currentDate, new Date())\n\n    getSeconds = getSeconds - (getMinutes * 60)\n    getMinutes = getMinutes - (getHours * 60)\n    getHours = getHours - (getDays * 24)\n    getDays = getDays - (getYears * 365)\n\n    if (state.ERRORS[0]) {\n        UI_ELEMENTS.DATE_INPUT.classList.remove('error')\n        clearTimeout(timer)\n    }\n\n    if (isFuture(currentDate)) {\n        UI_ELEMENTS.DATE_ANSWER.textContent = `${getTime(getYears, ' year(s)')} \n        ${getTime(getDays, ' day(s)')} \n        ${getTime(getHours, ' hour(s)')} \n        ${getTime(getMinutes, ' minute(s)')} \n        ${getTime(getSeconds, ' second(s)')} \n        left until the future date`\n    } else {\n        UI_ELEMENTS.DATE_INPUT.classList.add('error')\n        return UI_ELEMENTS.DATE_ANSWER.textContent = state.ERRORS[0]\n    }\n}\n\nfunction getTime(time, word) {\n    return time ? time + word : null\n}\n\n","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import { millisecondsInMinute } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarYears from \"../differenceInCalendarYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear(1584);\n  dateRight.setFullYear(1584); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - Number(isLastYearNotFull)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isFuture\n * @category Common Helpers\n * @summary Is the given date in the future?\n * @pure false\n *\n * @description\n * Is the given date in the future?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the future\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 31 December 2014 in the future?\n * var result = isFuture(new Date(2014, 11, 31))\n * //=> true\n */\n\nexport default function isFuture(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getTime() > Date.now();\n}"],"names":["$58880d5658867d68$export$6b8c0dabfa626b4f","DATE_INPUT","document","querySelector","DATE_ANSWER","DATE_FORM","DATE_BUTTON","required","args","length","TypeError","argument","$377d1ce359384586$export$2e2bcd8739ae039","arguments","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","NaN","date","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","dirtyDate","$bce2d00733a79246$export$2e2bcd8739ae039","setHours","dirtyDateLeft","dirtyDateRight","startOfDayLeft","$9445ecc5e7cfb647$export$2e2bcd8739ae039","startOfDayRight","timestampLeft","$6eb366e006a8b659$export$2e2bcd8739ae039","timestampRight","Math","round","$5e650688c0910592$var$compareLocalAsc","dateLeft","dateRight","diff","pow","$c83d105896c1098b$var$roundingMap","ceil","floor","trunc","value","$c83d105896c1098b$export$b6474a47258c1211","method","dirtyNumber","number","Number","isNaN","$9c2d1611e11d9224$var$patterns","dateTimeDelimiter","timeZoneDelimiter","timezone","$9c2d1611e11d9224$var$dateRegex","$9c2d1611e11d9224$var$timeRegex","$9c2d1611e11d9224$var$timezoneRegex","$9c2d1611e11d9224$var$splitDateString","dateString","timeString","dateStrings","array","split","test","substr","token","exec","time","replace","$9c2d1611e11d9224$var$parseYear","additionalDigits","regex","RegExp","captures","match","year","restDateString","parseInt","century","slice","$9c2d1611e11d9224$var$parseDate","isWeekDate","dayOfYear","$9c2d1611e11d9224$var$parseDateUnit","month","day","week","dayOfWeek","_year","$9c2d1611e11d9224$var$validateWeekDate","isoWeekYear","fourthOfJanuaryDay","getUTCDay","setUTCDate","getUTCDate","$9c2d1611e11d9224$var$dayOfISOWeekYear","$9c2d1611e11d9224$var$daysInMonths","$9c2d1611e11d9224$var$isLeapYearIndex","$9c2d1611e11d9224$var$validateDate","$9c2d1611e11d9224$var$validateDayOfYearDate","max","$9c2d1611e11d9224$var$parseTime","hours","$9c2d1611e11d9224$var$parseTimeUnit","minutes","seconds","$9c2d1611e11d9224$var$validateTime","parseFloat","$9c2d1611e11d9224$var$parseTimezone","timezoneString","sign","_hours","$9c2d1611e11d9224$var$validateTimezone","$efd3ba4ec2608b1d$var$timer","$efd3ba4ec2608b1d$var$state","$efd3ba4ec2608b1d$var$getTime","word","addEventListener","e","preventDefault","setTimeout","tick","currentDate","dirtyOptions","options","$a874c42e2166676d$export$2e2bcd8739ae039","RangeError","parseYearResult","offset","timestamp","result","setFullYear","getUTCFullYear","getUTCMonth","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","$9c2d1611e11d9224$export$2e2bcd8739ae039","$87eb8823ffa05467$export$2e2bcd8739ae039","roundingMethod","$637fe0a8b24e6f33$export$2e2bcd8739ae039","$c13bbb54037e7269$export$2e2bcd8739ae039","$bc23742ab6e4a898$export$2e2bcd8739ae039","getDays","difference","abs","$f8bd67cac91ee19b$export$2e2bcd8739ae039","setDate","isLastDayNotFull","$5e650688c0910592$export$2e2bcd8739ae039","getYears","$8a0cd77776020c49$export$2e2bcd8739ae039","$e66021df2494c23e$export$2e2bcd8739ae039","isLastYearNotFull","$3ff7ac235dc3be01$export$2e2bcd8739ae039","classList","remove","clearTimeout","now","$f13d780f5b37c59f$export$2e2bcd8739ae039","add","textContent","$efd3ba4ec2608b1d$var$renderDate","reset"],"version":3,"file":"index.1aae4c10.js.map"}